/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT TRUE 1
#DEFINE_CONSTANT FALSE 0
// #DEFINE_CONSTANT
#CATEGORY "0" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

#HELP_BEGIN
To be used with Rollease Acmeda ARC Command Processor RS385 v1.0.umc module only.
Not to be used as a stand-alone module.
#HELP_END

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""
#USER_SIMPLSHARP_LIBRARY "RolleaseAcmedaARC"
/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT _SKIP_, _SKIP_, Connect, Disconnect, Initialize, Debug, Setup;
// ANALOG_INPUT 
// STRING_INPUT 
BUFFER_INPUT From_Device$[10000]; 

DIGITAL_OUTPUT _SKIP_, _SKIP_, Is_Initialized, Is_Communicating;
// ANALOG_OUTPUT 
STRING_OUTPUT To_Device$, Setup_Hub_Address$, Setup_Motor_Address$; 

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
STRING_PARAMETER Pulse_Hub_Address[3];
INTEGER_PARAMETER CommandProcessorID;
/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// INTEGER
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER

STRING msg[255];
Rollease arc;

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

CALLBACK FUNCTION SendTrace(STRING msg)
{
	IF (Debug)
	{
		trace("%s", msg);
	}
}

CALLBACK FUNCTION IsInit(INTEGER state)
{
	Is_Initialized = state;
}

CALLBACK FUNCTION IsComm(INTEGER state)
{
	Is_Communicating = state;
}

CALLBACK FUNCTION onRS485Transmit(STRING msg)
{
	MAKESTRING(To_Device$, "%s", msg);
}
 
CALLBACK FUNCTION OnResponseHubAddressChange(STRING Address)
{
   MAKESTRING(Setup_Hub_Address$, "%s", Address);
}

CALLBACK FUNCTION OnResponseMotorAddressChange(STRING Address)
{
   MAKESTRING(Setup_Motor_Address$, "%s", Address);
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH Initialize
{
	arc.Initialize(TRUE);
}
RELEASE Initialize
{
	arc.Initialize(FALSE);
}

PUSH Setup
{
	arc.Setup(TRUE);
}

RELEASE Setup
{
	arc.Setup(FALSE);
}

PUSH Connect
{
	arc.Connect();
}

Push Disconnect
{
	arc.Disconnect();
}

THREADSAFE CHANGE From_Device$
{
	WHILE (TRUE)
	{
		try
		{
			msg = Gather(";", From_Device$);
			if (LEN(msg))
			{
				arc.RS485Response(msg);
			}
		}
		catch
        {
            trace("Issue with Device Rx message handeling\n");
        }
	}
}

Function Main()
{
	WaitForInitializationComplete();
	RegisterDelegate(arc, SendDebug, SendTrace);
	RegisterDelegate(arc, OnInitializeChange, IsInit);
	RegisterDelegate(arc, OnCommunicatingChange, IsComm);
	RegisterDelegate(arc, OnRS485Transmit, onRS485Transmit);
	RegisterDelegate(arc, OnResponseHubAddressChange, OnResponseHubAddressChange);
	RegisterDelegate(arc, OnResponseMotorAddressChange, OnResponseMotorAddressChange);
 
	// DO NOT REMOVE! Need to wait for all components to register.
	Delay(2500);

	arc.Configure(CommandProcessorID, Pulse_Hub_Address);

	IF (Connect)
	{
		arc.Connect();
	}
}
